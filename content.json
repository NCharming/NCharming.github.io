{"meta":{"title":"XiaoNi 的博客","subtitle":"所谓朝走西来暮走东，人生恰似采花蜂","description":"学习总结，随记杂谈","author":"XiaoNi","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-12-16T11:34:34.000Z","updated":"2019-12-16T11:37:32.448Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Get it done！Make it better！try to share the best！ 一直在路上…"},{"title":"categories","date":"2019-12-16T11:18:03.000Z","updated":"2019-12-16T11:21:35.855Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-12-16T11:29:14.000Z","updated":"2019-12-16T11:32:48.371Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Notepad++","slug":"Notepad","date":"2019-12-16T11:38:10.000Z","updated":"2019-12-16T11:43:46.399Z","comments":true,"path":"2019/12/16/Notepad/","link":"","permalink":"http://yoursite.com/2019/12/16/Notepad/","excerpt":"","text":"Notepad++从很早就开始使用 Notepad++ 这款小而美的文本编辑器，详情介绍和下载，请至官网。 以前真的就是单纯的当个文本编辑器在用，只是感觉很小，又比 Win 自带的笔记本好上很多，根本没有仔细的去挖掘这个小宝藏。 今天花了点时间，对 Notepad++ 的了解算是入门以上了，我觉任何支撑插件扩展的都是一个宝藏，下面我将介绍 Notepad++ 部分使用功能和感受： 下载进入官网即可下载，目前最新的 Notepad++ 7.8.1 release 可执行文件才 3.8M ，当然你也可以直接下载压缩包，也不过 4.4M 进行安装。 使用首先体验到的就是外观，所以先介绍如何改变外观：让自己看的更舒服一点 改变主题 添加插件在安装的时候，如果你注意到，他会默认帮你安装好几个插件，今天我只介绍平时我自己感觉特别需要的功能。 添加插件有两种方式： 直接安装方式我在直接下载安装后，插件 -&gt; 软件管理，点击就是下面的界面 我自己通过下载 .dll 文件的方式又安装了一个插件管理 以上两种管理插件都可以直接下载 .dll方式当我们直接安装不了的时候，可以去下载 .dll 文件的方式安装 。下载后，解压，把 .dll 文件复制到 Notepad++ -&gt; plugins 文件下，然后重启即可。 当然也有这两种方式都安装不了的，不过我今天介绍的基本第一种方式就能解决，特别方便。 插件推荐主要推荐 JSON Viewer、SQLinForm、Compare 三个吧 JSON Viewer格式化你的 JSON 串，再也不用打开 json.cn 在线(断网了,可就凉凉了)工具了。 ![](.\\Notepad++\\JSON Viewer.png) 前面可折叠，是 Notepad++ 本身的功能，在导航栏中 语言-&gt;JSON 即可 SQLinForm格式化你的 SQL 语句，这个感觉特别棒，超好看的呢 XML Tools顾名思义，就是格式化 XML 格式的，不过现在开发多是 JSON，有兴趣的自己安装看看效果 Compare这个是真很好了，当然你也可以去下载 Beyond Compare 4，首先文件大不说，还不是免费的。所以这个简直不要太棒了。 当两个文件相同，会提示如上，当不同是提示如下： NppExport比如上面带颜色的代码，我要复制到 Word 中，也可以将颜色也复制过去。 NppFTP这个我试了下，可以连接，但是总感觉用的不爽(我现在在用 UltraEdit )，不过想集成于一体，还是很不错的哦。 Tip暂时就是这些了，基本足够应付我们日常的操作了，而且还这么小巧，为什么不用呢？以后有用到更好的插件再添加吧！","categories":[{"name":"工具分享","slug":"工具分享","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"实用小工具","slug":"实用小工具","permalink":"http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"Notepad++","slug":"Notepad++","date":"2019-12-16T11:38:10.000Z","updated":"2019-12-16T11:40:05.567Z","comments":true,"path":"2019/12/16/Notepad++/","link":"","permalink":"http://yoursite.com/2019/12/16/Notepad++/","excerpt":"","text":"","categories":[{"name":"工具分享","slug":"工具分享","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"实用小工具","slug":"实用小工具","permalink":"http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"单链表详解","slug":"单链表详解","date":"2019-12-16T11:26:44.000Z","updated":"2019-12-16T11:33:26.263Z","comments":true,"path":"2019/12/16/单链表详解/","link":"","permalink":"http://yoursite.com/2019/12/16/%E5%8D%95%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"单链表结构如下： 我们知道数组是连续的存储空间；而链表不需要，因为有「指针」，它通过“指针”将一组零散的内存块串联起来使用 。当系统总容量 &gt;100M；但是不连续，此时我们无法申请容量为 100M 的数组，但是链表可以。 一般我们习惯性的将第一个节点称为头结点，并不存储实际的内容；而最后一个节点叫尾节点，是指向一个空地址NULL。 头结点 VS 头指针这里，会有一个头结点和头指针的概念： 单链表有带头节点和不带头节点两种: “链表中第一个节点的存储位置叫做头指针”，如果链表有头结点，那么头指针就是指向头结点的指针。头指针所指的不存放数据元素的第一个节点称为「头结点」（头结点指向首元节点 ）。头结点的数据域一般不存放数据（有些情况下也可存放链表的长度，用做监视哨等）存放第一个数据元素的节点称作第一个数据元素节点，或称为首元节点。 链表中第一个节点的存储位置叫做头指针，那么整个链表的存取就必须从头指针开始。 “链表中第一个结点的存储位置叫做头指针”，如果链表有头结点，那么头指针就是指向头结点数据域的指针。 头结点的特性： 头结点不是必须的 对在第一个元素节点前插入节点和删除第一个节点，其操作与对其他节点的操作统一了。 指针在 Java 中没有指针这个说法，理解成引用就好了。 将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。 在实际写代码过程中，可能也是指针最容易出错。 单链表所有操作了解了上面的基本概念，现在可以来写简单的单链表了，在实战中不断犯错，不断理解。 1import java.util.Scanner;23/**4 * 包含链表的基本操作，而且输出比较友好哦5 */6public class TestObject &#123;7 private Node head = new Node();//头节点，初始为一个空节点8 private Node temp;//临时节点910 //定义节点结构11 static class Node &#123;12 private Node next;13 private int data;1415 public Node(int data) &#123;16 this.data = data;17 &#125;1819 public Node() &#123;20 &#125;21 &#125;2223 //辅助：遍历链表输出24 public void print(String str) &#123;25 temp = head.next;//head 是头节点，不保存实际的数据26 System.out.println(str+\"：\");27 while (temp != null) &#123;28 System.out.print(temp.data + \"-&gt;\");29 temp = temp.next;30 &#125;31 //最后一个节点指向 null32 System.out.println(\"null\");33 &#125;3435 //辅助：链表长度36 public int length() &#123;37 temp = head.next;//我这直接从第一个真正存储元素的位置开始38 int length = 1;39 while (temp != null) &#123;40 length++;41 temp = temp.next;42 &#125;43 return length;44 &#125;4546 //初始化一个链表(每次都在链尾插入)47 public void addNode(int data) &#123;48 Node newNode = new Node(data);//新节点的数据49 temp = head;//每次从头节点开始遍历50 // while 循环使得每次 temp 都会是当前链表的最后一个节点51 while (temp.next != null) &#123;52 temp = temp.next;53 &#125;54 //在链表的尾部增加一个节点55 temp.next = newNode;56 &#125;5758 //指定位置插入59 public void insertNode(int index, int data) &#123;60 if (index &gt; length() || index &lt; 0) &#123;61 System.out.println(\"插入位置错误，\" + \"插入范围应为：\" + \"[1\" + \",\" + length() + \"]\");62 &#125;6364 Node indexNode = new Node(data);65 temp = head; //始终从头节点开始遍历66 int length = 1;67 /* while (temp != null) &#123;68 if (length == index)69 break;70 temp = temp.next;71 length++;72 &#125;73 //主要理解下面这两句代码74 indexNode.next = temp.next;75 temp.next = indexNode;*/76 //两种方法都可以77 while(temp != null) &#123;78 //注意 length++ 哦79 if (length++ == index) &#123;80 //主要理解下面这两句代码81 indexNode.next = temp.next;82 temp.next = indexNode;83 &#125;84 temp = temp.next;85 &#125;86 &#125;8788 //指定位置删除89 public void deleteNode(int index)&#123;90 if (index &gt; length()-1 || index &lt; 0) &#123;91 System.out.println(\"插入位置错误，\" + \"插入范围应为：\" + \"[1\" + \",\" + length() + \")\");92 &#125;9394 temp=head;95 int length=1;96 while(temp!=null)&#123;97 if(length++==index)&#123;98 //将被删除的节点的 next指针 赋给它的前一个 next指针99 temp.next=temp.next.next;100 &#125;101 temp=temp.next;102 &#125;103104 &#125;105106107 public static void main(String[] args) &#123;108 TestObject test = new TestObject();109 //初始化一个链表110 int data[] = &#123;1, 5, 3, 4, 6&#125;;111 for (int i = 0; i &lt; data.length; i++) &#123;112 test.addNode(data[i]);113 &#125;114 //输出115 test.print(\"初始化的链表\");116117 Scanner insIn = new Scanner(System.in);118 System.out.println(\"请输入要插入节点的位置：\");119 int index=insIn.nextInt();120 System.out.println(\"请输入要插入节点的数据：\");121 //在指定位置插入节点 + 输出122 test.insertNode(index,insIn.nextInt());123 test.print(\"插入后的链表\");124125 Scanner delIn = new Scanner(System.in);126 System.out.println(\"请输入要删除节点的位置：\");127 //在指定位置删除节点 + 输出128 test.deleteNode(delIn.nextInt());129 test.print(\"删除后的链表\");130 &#125;131&#125; 下面示意图是在指定位置插入一个节点的详解；其他比如删除操作同理 总结 学会用画图辅助自己思考，可能有时候只靠想，脑子会不够用哦。 不要觉得自己看懂了，我要我觉得你应该去自己独立的写出来。 如果觉得自己代码没有问题，但是结果并不是自己想象那样的，那么请 Debug。IDEA Debug 了解一下。","categories":[{"name":"基础数据结构","slug":"基础数据结构","permalink":"http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"基础数据结构","slug":"基础数据结构","permalink":"http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"java 实现单链表","slug":"java-实现单链表","permalink":"http://yoursite.com/tags/java-%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8/"}]},{"title":"Hexo 搭建","slug":"Hexo搭建","date":"2019-12-12T03:12:51.000Z","updated":"2019-12-16T11:33:54.125Z","comments":true,"path":"2019/12/12/Hexo搭建/","link":"","permalink":"http://yoursite.com/2019/12/12/Hexo%E6%90%AD%E5%BB%BA/","excerpt":"","text":"说在前面： 此篇文章是默认你已经成功搭建了 Hexo，即你至少能用 localhost:4000 来访问你本地的 Hexo 了。如果你接下来不知道怎么玩了或者有点思路但是不知道下手，那么我这篇文章可能适合你 换个主题 GitHub 上有很多主题，自己直接去上面搜索 Hexo-theme 关键字即可。随便点进去，里面会有示例网站，然后自己挑个自己喜欢的。 进入到自己安装的 Hexo 文件夹下： git clone https://github.com/iissnan/hexo-theme-next.git themes/next 后面的 themes/next 表示你克隆下来存放的路径 咳咳，如果下载不下来(time_out)，直接去 GitHub Download ZIP 再解压到 themes 文件夹下 next 下也有很多子主题哦，进入到 next 下面的 _config.yml 文件：直接到 #Schemes 去选择自己喜欢的 回到 Hexo 下 _config.yml 文件，theme: next 即可。注意这里的 next 是你在 themes 文件下的文件夹的名字，这里这个 next ，你可以随意起名字；只要 Hexo 下 _config.yml 文件，theme: XXX 对应即可。 此时，主题就换好了！ 写篇文章还是在你本地的 Hexo 文件夹下面，就在这个界面，右键点击你的 Git Bash Here hexo new [layout] &lt;title&gt; 布局 Hexo 有三种默认布局：post、page 和 draft。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹 布局 路径 post source/_posts page source draft source/_draft 比如：hexo new Hexo搭建 就是在 source/_posts 下创建了一个名为 Hexo搭建 的 .md 文件 插个图片我们在写文章的时候，难免需要图片来帮助说明或者表达语言难以表达的事物。这个时候，觉得要是可以放个图片就好了。 到 Hexo 下 _config.yml 文件中将 post_asset_folder: 改为 true 这将使得你每次在 new 文章的时候，都会自动帮你创建一个在同目录的同名文件夹，里面就可以放你的图片 引用：第一想到的是使用相对路径去引用，不过，我试过了；我这不可以（在 .md 中可以看到图片效果，但是通过浏览器访问就凉了），那么换个方法： Hexo 本地内容.png：是我自己放在对应文件夹下的图片名字 添加分类进入到本地博客根目录： hexo new page categoriew 成功后会提示：在此目录下创建了一个 index.md 文件 ..\\source\\categories\\index.md 打开此 index.md title: categoriesdate: 2019-12-16 19:18:03 加入： 1&gt;type: \"categories\" 然后在你写的文章最上面加入： 1&gt;categories: 2&gt;- Hexo 3&gt;注：Hexo hexo一篇文章只能属于一个分类 此时分类即可用了。 tip：其他的关于、标签类比即可","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo 搭建博客","slug":"Hexo-搭建博客","permalink":"http://yoursite.com/tags/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}]}]}